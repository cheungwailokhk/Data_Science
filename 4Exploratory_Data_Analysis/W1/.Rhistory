-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
dat <-  read.table(url, sep = ",", header = TRUE)
dat2 <- tbl_df(dat)
rm(dat)
rm(dat)
View(dat2)
sum(filter(dat2, !is.na(VAL), VAL==24))
View(dat2)
View(dat2)
dat2$VAL
dat2$VAL
dat2$VAL
dat2$VAL
dat2$VAL
dat2$VAL
dat2$VAL
filter(dat2,  VAL==24)
View(dat2)
HEAD(DAT2, 2)
dat2
cran2 <- select(cran, size:ip_id)
View(cran2)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version) , ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
str(cran3)
summary(cran3)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size -1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
## download.file(fileUrl1, destfile = "./Dataset/Quiz1-01.csv", method = "curl")
dat <-  read.table(url, sep = ",", header = TRUE)
rm(cran, cran2, cran3)
str(dat)
dat2 <- tbl_df(dat)
View(dat)
View(dat2)
filter(dat2, VAL==24)
filter(SELECT(dat2, VAL), VAL==24)
filter(SELECT(dat2, VAL), VAL==24)
SELECT(dat2, VAL)
library(dplyr)
SELECT(dat2, VAL)
select(dat2, VAL)
filter(dat2, VAL==24, !is.na(VAL))
sum(data$VAL == 24, na.rm = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
dat <-  read.table(url, sep = ",", header = TRUE)
dat
sum(data$VAL == 24, na.rm = TRUE)
rm(dat, dat2)
## Q1 method1
data <-  read.table(url, sep = ",", header = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
filter(dat2, VAL==24, !is.na(VAL))
filter(select(data2, VAL), VAL==24, !is.na(VAL))
filter(select(data2, VAL), VAL==24, !is.na(VAL))
filter(select(data2, VAL), VAL==24, !is.na(VAL))
data2 <- tbl_df(data)
filter(select(data2, VAL), VAL==24, !is.na(VAL))
sum(filter(select(data2, VAL), VAL==24, !is.na(VAL)))
sum(data$VAL == 24, na.rm = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
sum(data$VAL == 24, na.rm = TRUE)
count(filter(select(data2, VAL), VAL==24, !is.na(VAL)))
data$VAL == 24
count(filter(select(data2, VAL), VAL==24, !is.na(VAL)))
sum(filter(select(data2, VAL), VAL==24), na.rm = TRUE)
count(filter(select(data2, VAL), VAL==24), na.rm = TRUE)
count(filter(select(data2, VAL), VAL==24))
library(swirl)
swirl()
swirl(())
swirl()
library(tidyr)
students
?gather
gather(student, -grade)
gather(students, -grade)
gather(students, sex, count, -grade)
class(students)
students2
res <- gather(students2, 2)
res <- gather(students2, male_1)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
View(students)
?gather
gather(students, sex, count)
?spread
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5 , na.rm = TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
print
library(swirl)
swirl()
exit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, data = res, col = sex_class, into = c("sex", "class"))
rlang::last_error()
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
View(students3)
View(students3)
?gather
submit()
View(students)
?spread
submit()
submit()
View(students)
View(students)
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
?unique
submit()
submit()
View(passed)
passed
failed
mutate(passed, status = "size / "passed)
mutate(passed, status = "passed")
assed <- passed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
library(sqldf)
install.packages("sqldf")
library(sqldf)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, destfile = "./Quiz2.csv", method = "curl")
getwd()
data <-  read.table(url, sep = ",", header = TRUE)
View(data)
df <- read.csv.sql(url, "select pwgtp1 from acs where AGEP < 50")
df <- read.csv.sql(url, "select pwgtp1 from file where AGEP < 50")
View(df)
rm(data)
rm(df)
acs <-  read.table(url, sep = ",", header = TRUE)
q1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
conn <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(conn)
close(conn)
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
list()
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label= TRUE)
now()
this_moment <- now()
wday(now())
this_momenth
this_moment
hour(now())
hour(this_moment
)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
?ymd_hms
hms("03:22:14")
dt2
dt2
ymt(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = hour(now()), minutes = minute((now())), seconds = second((now())))
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_momenth
this_moment
?now
nyc <- (tzone="America/New_York")
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive(arrive, tzone ="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone ="Asia/Hong_Kong")
arrive
\
last_time <- mdy( "June 17, 2008", tz= "Singapore")
last_time
?interval
how_long <- interval(start = arrive, end = last_time)
how_long <- interval(start = last_time, end = arrive)
how_long
as.period(how_long)
stopwatch()
getwd()
setwd("/Users/l/Documents/Google_Drive/Workplace-JP/Workspace/R/datasciencecoursera/4Exploratory_Data_Analysis/W1")
getwd()
## 1. Data preparation
## Download data
if (!file.exists('./household_power_consumption.txt')){
link <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(url = link,
destfile = './data.zip',
mode = 'wb')
unzip(zipfile = "data.zip", exdir = getwd())
file.remove('./data.zip')
rm(link)
}
## Read data
df <- read.table('./household_power_consumption.txt',
header = TRUE, sep = ";", na.strings = "?",
colClasses = c('character','character','numeric',
'numeric','numeric','numeric',
'numeric','numeric','numeric'))
## Clean data
df <- subset(df, Date == "1/2/2007" | Date == "2/2/2007")
df <- df[complete.cases(df),]
df$TimeStamp = paste(df$Date, df$Time, sep = " ")
## Convert data types
library(lubridate)
df$TimeStamp <- dmy_hms(df$TimeStamp)
# Remove useless columns
df = subset(df, select = -c(Date, Time))
## 2. Create png
##  Create the plot
with(df,
hist(x = Global_active_power,
main="Global Active Power",
xlab = "Global Active Power(kilowatt)",
ylab = "Frequency", col = "red")
)
## Copy to png
dev.copy(png,"plot1.png", width=480, height=480)
dev.off()
## 1. Data preparation
## Download data
if (!file.exists('./household_power_consumption.txt')){
link <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(url = link,
destfile = './data.zip',
mode = 'wb')
unzip(zipfile = "data.zip", exdir = getwd())
file.remove('./data.zip')
rm(link)
}
## Read data
df <- read.table('./household_power_consumption.txt',
header = TRUE, sep = ";", na.strings = "?",
colClasses = c('character','character','numeric',
'numeric','numeric','numeric',
'numeric','numeric','numeric'))
## Clean data
df <- subset(df, Date == "1/2/2007" | Date == "2/2/2007")
df <- df[complete.cases(df),]
df$TimeStamp = paste(df$Date, df$Time, sep = " ")
## Convert data types
library(lubridate)
df$TimeStamp <- dmy_hms(df$TimeStamp)
# Remove useless columns
df = subset(df, select = -c(Date, Time))
## 2. Create png
##  Create the plot
library(ggplot2)
ggplot(df, aes(x = TimeStamp,
y  = Global_active_power)) +
geom_line() +
labs(x = "",
y = "Global Active Power (kilowatts)",
color = "") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
## Copy to png
dev.copy(png,"plot2.png", width=480, height=480)
dev.off()
## 1. Data preparation
## Download data
if (!file.exists('./household_power_consumption.txt')){
link <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(url = link,
destfile = './data.zip',
mode = 'wb')
unzip(zipfile = "data.zip", exdir = getwd())
file.remove('./data.zip')
rm(link)
}
## Read data
df <- read.table('./household_power_consumption.txt',
header = TRUE, sep = ";", na.strings = "?",
colClasses = c('character','character','numeric',
'numeric','numeric','numeric',
'numeric','numeric','numeric'))
## Clean data
df <- subset(df, Date == "1/2/2007" | Date == "2/2/2007")
df <- df[complete.cases(df),]
df$TimeStamp = paste(df$Date, df$Time, sep = " ")
## Convert data types
library(lubridate)
df$TimeStamp <- dmy_hms(df$TimeStamp)
# Remove useless columns
df = subset(df, select = -c(Date, Time))
## 2. Create png
##  Create the plot
library(ggplot2)
colors <- c("Sub_metering_1" = "black",
"Sub_metering_2" = "red",
"Sub_metering_3" = "blue")
ggplot(data = df, aes(x = TimeStamp)) +
geom_line(aes(y = Sub_metering_1, color = "Sub_metering_1")) +
geom_line(aes(y = Sub_metering_2, color = "Sub_metering_2")) +
geom_line(aes(y = Sub_metering_3, color = "Sub_metering_3")) +
labs(x = "",
y = "Energy sub metering",
color = "") +
scale_color_manual(values = colors) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(0, 0, 0, 0),
legend.key = element_rect(colour = "transparent", fill = "white"),
) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
## Copy to png
dev.copy(png,"plot3.png", width=480, height=480)
dev.off()
## 1. Data preparation
## Download data
if (!file.exists('./household_power_consumption.txt')){
link <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(url = link,
destfile = './data.zip',
mode = 'wb')
unzip(zipfile = "data.zip", exdir = getwd())
file.remove('./data.zip')
rm(link)
}
## Read data
df <- read.table('./household_power_consumption.txt',
header = TRUE, sep = ";", na.strings = "?",
colClasses = c('character','character','numeric',
'numeric','numeric','numeric',
'numeric','numeric','numeric'))
## Clean data
df <- subset(df, Date == "1/2/2007" | Date == "2/2/2007")
df <- df[complete.cases(df),]
df$TimeStamp = paste(df$Date, df$Time, sep = " ")
## Convert data types
library(lubridate)
df$TimeStamp <- dmy_hms(df$TimeStamp)
# Remove useless columns
df = subset(df, select = -c(Date, Time))
## 2. Create png
##  Create plots
library(ggplot2)
plot1 <- ggplot(df, aes(x = TimeStamp,
y  = Global_active_power)) +
geom_line() +
labs(x = "",
y = "Global Active Power (kilowatts)",
color = "") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
plot2 <- ggplot(df, aes(x = TimeStamp,
y  = Voltage)) +
geom_line() +
labs(x = "datetime",
y = "Voltage (volt)",
color = "") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
colors <- c("Sub_metering_1" = "black",
"Sub_metering_2" = "red",
"Sub_metering_3" = "blue")
plot3 <- ggplot(data = df, aes(x = TimeStamp)) +
geom_line(aes(y = Sub_metering_1, color = "Sub_metering_1")) +
geom_line(aes(y = Sub_metering_2, color = "Sub_metering_2")) +
geom_line(aes(y = Sub_metering_3, color = "Sub_metering_3")) +
labs(x = "",
y = "Energy sub metering",
color = "") +
scale_color_manual(values = colors) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(0, 0, 0, 0),
legend.key = element_rect(colour = "transparent", fill = "white"),
) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
plot4 <- ggplot(df, aes(x = TimeStamp,
y  = Global_reactive_power)) +
geom_line() +
labs(x = "datetime",
y = "Global Rective Power (kilowatts)",
color = "") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")) +
scale_x_datetime(date_labels = "%a", date_breaks = "1 day")
## Prepare environment
# install.packages("gridExtra")
library(gridExtra)
grid.arrange(plot1, plot2, plot3, plot4,
ncol = 2, nrow = 2)
## Copy to png
dev.copy(png,"plot4.png", width=480, height=480)
dev.off()
